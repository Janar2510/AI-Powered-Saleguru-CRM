import React, { useState, useEffect } from 'react';
import { 
  FileText, 
  Download, 
  Eye, 
  Settings, 
  Plus, 
  Edit, 
  Trash2,
  Palette,
  Type,
  Layout,
  CheckCircle,
  AlertCircle,
  Play,
  Save,
  Upload,
  Search,
  Filter,
  X
} from 'lucide-react';
import Container from '../layout/Container';
import Card from '../ui/Card';
import Button from '../ui/Button';
import Badge from '../ui/Badge';
import DocumentUploader from '../ui/DocumentUploader';
import PDFPreview from '../ui/PDFPreview';
import ViewChooser, { ViewMode } from '../ui/ViewChooser';
import { useToastContext } from '../../contexts/ToastContext';
import { DocumentGenerationService, DocumentData, DocumentTemplate } from '../../services/documentGenerationService';
import { supabase } from '../../services/supabase';

interface TemplatePreview {
  id: string;
  template_id: string;
  preview_data: any;
  generated_at: string;
}

interface UploadedDocument {
  id: string;
  name: string;
  type: 'template' | 'document';
  file: File;
  uploaded_at: string;
  size: number;
}

const DocumentTemplateSelector: React.FC = () => {
  const [templates, setTemplates] = useState<DocumentTemplate[]>([]);
  const [selectedTemplate, setSelectedTemplate] = useState<DocumentTemplate | null>(null);
  const [activeTab, setActiveTab] = useState('templates');
  const [isLoading, setIsLoading] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedDocumentType, setSelectedDocumentType] = useState<string>('invoice');
  const [showGenerator, setShowGenerator] = useState(false);
  const [generatedDocument, setGeneratedDocument] = useState<string>('');
  const [viewMode, setViewMode] = useState<ViewMode>('cards');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState<string>('all');
  const [uploadedDocuments, setUploadedDocuments] = useState<UploadedDocument[]>([]);
  const [showUploadModal, setShowUploadModal] = useState(false);
  const [showPDFPreview, setShowPDFPreview] = useState(false);
  const [previewFile, setPreviewFile] = useState<File | string | null>(null);
  const [previewTitle, setPreviewTitle] = useState('');
  const [documentData, setDocumentData] = useState<DocumentData>({
    number: '',
    customer_name: '',
    customer_email: '',
    customer_address: '',
    company_name: 'SaleGuru CRM',
    company_address: '123 Business St, City, Country',
    issue_date: new Date().toISOString().split('T')[0],
    due_date: '',
    items: [{ 
      description: '', 
      quantity: 1, 
      unit_price: 0, 
      total: 0,
      discount_percent: 0,
      tax_rate: 0
    }],
    subtotal: 0,
    tax_rate: 20,
    tax_amount: 0,
    discount_amount: 0,
    total: 0,
    notes: '',
    terms_conditions: '',
    status: 'draft'
  });
  const { showToast } = useToastContext();

  useEffect(() => {
    loadTemplates();
  }, []);

  const loadTemplates = async () => {
    setIsLoading(true);
    try {
      const templates = await DocumentGenerationService.getTemplates();
      setTemplates(templates);
    } catch (error) {
      showToast({ title: 'Error loading templates', type: 'error' });
    } finally {
      setIsLoading(false);
    }
  };

  const generateDocument = async (templateId: string) => {
    setIsGenerating(true);
    try {
      // Calculate totals
      const subtotal = documentData.items.reduce((sum, item) => sum + item.total, 0);
      const tax_amount = subtotal * (documentData.tax_rate / 100);
      const total = subtotal + tax_amount;

      const dataWithTotals = {
        ...documentData,
        subtotal,
        tax_amount,
        total
      };

      const html = await DocumentGenerationService.generateDocument(templateId, dataWithTotals);
      setGeneratedDocument(html);
      showToast({ title: 'Document generated successfully', type: 'success' });
    } catch (error) {
      showToast({ title: 'Error generating document', type: 'error' });
    } finally {
      setIsGenerating(false);
    }
  };

  const previewDocument = async () => {
    if (generatedDocument) {
      await DocumentGenerationService.previewDocument(generatedDocument);
    }
  };

  const downloadDocument = async () => {
    if (generatedDocument) {
      const filename = `${documentData.number || 'document'}-${new Date().toISOString().split('T')[0]}.html`;
      await DocumentGenerationService.downloadDocument(generatedDocument, filename);
      showToast({ title: 'Document downloaded successfully', type: 'success' });
    }
  };

  const updateItemTotal = (index: number) => {
    const updatedItems = [...documentData.items];
    updatedItems[index].total = updatedItems[index].quantity * updatedItems[index].unit_price;
    setDocumentData({ ...documentData, items: updatedItems });
  };

  const addItem = () => {
    setDocumentData({
      ...documentData,
      items: [...documentData.items, { description: '', quantity: 1, unit_price: 0, total: 0, discount_percent: 0, tax_rate: 0 }]
    });
  };

  const removeItem = (index: number) => {
    const updatedItems = documentData.items.filter((_, i) => i !== index);
    setDocumentData({ ...documentData, items: updatedItems });
  };

  const getStyleColor = (style: string) => {
    switch (style) {
      case 'modern': return 'primary';
      case 'classic': return 'secondary';
      case 'minimal': return 'success';
      case 'professional': return 'warning';
      case 'creative': return 'danger';
      default: return 'primary';
    }
  };

  const getDocumentTypeIcon = (type: string) => {
    switch (type) {
      case 'invoice': return FileText;
      case 'receipt': return Download;
      case 'quotation': return Eye;
      case 'purchase_order': return Settings;
      case 'delivery_note': return Layout;
      default: return FileText;
    }
  };

  // New document management functions
  const handleUploadDocuments = (files: File[]) => {
    const newDocuments: UploadedDocument[] = files.map(file => ({
      id: Math.random().toString(36).substr(2, 9),
      name: file.name,
      type: file.name.includes('template') ? 'template' : 'document',
      file,
      uploaded_at: new Date().toISOString(),
      size: file.size
    }));
    
    setUploadedDocuments(prev => [...prev, ...newDocuments]);
    setShowUploadModal(false);
    showToast({
      title: 'Documents Uploaded',
      description: `${files.length} document(s) uploaded successfully`,
      type: 'success'
    });
  };

  const handlePreviewPDF = (file: File | string, title: string) => {
    setPreviewFile(file);
    setPreviewTitle(title);
    setShowPDFPreview(true);
  };

  const handleDownloadDocument = (uploadedDoc: UploadedDocument) => {
    const url = URL.createObjectURL(uploadedDoc.file);
    const link = document.createElement('a');
    link.href = url;
    link.download = uploadedDoc.name;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    showToast({
      title: 'Download Started',
      description: `${uploadedDoc.name} download has begun`,
      type: 'success'
    });
  };

  const handleDeleteDocument = (documentId: string) => {
    setUploadedDocuments(prev => prev.filter(doc => doc.id !== documentId));
    showToast({
      title: 'Document Deleted',
      description: 'Document has been removed',
      type: 'success'
    });
  };

  const getFilteredTemplates = () => {
    return templates.filter(template => {
      const matchesSearch = template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           template.type.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesFilter = filterType === 'all' || template.type === filterType;
      return matchesSearch && matchesFilter;
    });
  };

  const getFilteredDocuments = () => {
    return uploadedDocuments.filter(doc => {
      const matchesSearch = doc.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           doc.type.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesFilter = filterType === 'all' || doc.type === filterType;
      return matchesSearch && matchesFilter;
    });
  };

  return (
    <Container>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-white mb-2">
              Document Template Manager
            </h1>
            <p className="text-[#b0b0d0]">
              Choose and customize document templates for invoices, receipts, and more
            </p>
          </div>
          <div className="flex items-center gap-3">
            <Button variant="secondary" size="sm">
              <Settings className="w-4 h-4 mr-2" />
              Settings
            </Button>
            <Button variant="primary" size="sm" onClick={() => setShowGenerator(true)}>
              <Plus className="w-4 h-4 mr-2" />
              Generate Document
            </Button>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="flex space-x-1 bg-[#23233a]/30 rounded-lg p-1">
          {[
            { id: 'templates', label: 'Templates', icon: FileText },
            { id: 'preview', label: 'Preview', icon: Eye },
            { id: 'generator', label: 'Generator', icon: Download },
            { id: 'settings', label: 'Settings', icon: Settings }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex items-center px-4 py-2 rounded-md transition-colors ${
                activeTab === tab.id
                  ? 'bg-[#a259ff] text-white'
                  : 'text-[#b0b0d0] hover:text-white hover:bg-[#23233a]/50'
              }`}
            >
              <tab.icon className="w-4 h-4 mr-2" />
              {tab.label}
            </button>
          ))}
        </div>

        {/* Templates Tab */}
        {activeTab === 'templates' && (
          <div className="space-y-6">
            {/* Header with Search and Controls */}
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="relative">
                  <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-[#b0b0d0]" />
                  <input
                    type="text"
                    placeholder="Search templates..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10 pr-4 py-2 bg-[#23233a] border border-[#334155] rounded-lg text-white placeholder-[#b0b0d0] focus:outline-none focus:border-[#a259ff]"
                  />
                </div>
                
                <select
                  value={filterType}
                  onChange={(e) => setFilterType(e.target.value)}
                  className="px-3 py-2 bg-[#23233a] border border-[#334155] rounded-lg text-white focus:outline-none focus:border-[#a259ff]"
                >
                  <option value="all">All Types</option>
                  <option value="template">Templates</option>
                  <option value="document">Documents</option>
                </select>
              </div>
              
              <div className="flex items-center space-x-3">
                <ViewChooser
                  currentView={viewMode}
                  onViewChange={setViewMode}
                  availableViews={['cards', 'table', 'list', 'grid']}
                />
                
                <Button 
                  variant="secondary" 
                  size="sm" 
                  onClick={() => setShowUploadModal(true)}
                >
                  <Upload className="w-4 h-4 mr-2" />
                  Upload
                </Button>
              </div>
            </div>

            {/* Document Type Filter */}
            <div className="flex items-center space-x-4">
              <span className="text-[#b0b0d0]">Document Type:</span>
              <div className="flex space-x-2">
                {['invoice', 'receipt', 'quotation', 'purchase_order', 'delivery_note'].map((type) => {
                  const Icon = getDocumentTypeIcon(type);
                  return (
                    <button
                      key={type}
                      onClick={() => setSelectedDocumentType(type)}
                      className={`flex items-center px-3 py-2 rounded-lg transition-colors ${
                        selectedDocumentType === type
                          ? 'bg-[#a259ff] text-white'
                          : 'bg-[#23233a]/50 text-[#b0b0d0] hover:text-white'
                      }`}
                    >
                      <Icon className="w-4 h-4 mr-2" />
                      {type.replace('_', ' ')}
                    </button>
                  );
                })}
              </div>
            </div>

            {/* Templates Display */}
            {viewMode === 'cards' && (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {getFilteredTemplates()
                  .filter(template => template.type === selectedDocumentType)
                  .map((template) => (
                    <Card key={template.id} className="hover:bg-[#23233a]/50 transition-colors">
                      <div className="relative">
                        {/* Template Preview */}
                        <div className="h-48 bg-gradient-to-br from-[#a259ff]/20 to-[#764ba2]/20 rounded-lg mb-4 flex items-center justify-center">
                          <div className="text-center">
                            <Palette className="w-12 h-12 text-[#a259ff] mx-auto mb-2" />
                            <h3 className="text-white font-medium">{template.name}</h3>
                            <Badge variant={getStyleColor(template.style) as any} size="sm" className="mt-2">
                              {template.style}
                            </Badge>
                          </div>
                        </div>

                        {/* Template Info */}
                        <div className="space-y-3">
                          <div className="flex items-center justify-between">
                            <h3 className="text-white font-medium">{template.name}</h3>
                            <Badge variant={getStyleColor(template.style) as any} size="sm">
                              {template.style}
                            </Badge>
                          </div>
                          
                          <p className="text-[#b0b0d0] text-sm">
                            {template.type.replace('_', ' ')} template with {template.style} styling
                          </p>

                          {/* Action Buttons */}
                          <div className="flex items-center space-x-2 pt-3 border-t border-[#23233a]/30">
                            <Button 
                              size="sm" 
                              variant="secondary" 
                              className="flex-1"
                              onClick={() => {
                                setSelectedTemplate(template);
                                setActiveTab('preview');
                              }}
                            >
                              <Eye className="w-4 h-4 mr-2" />
                              Preview
                            </Button>
                            <Button 
                              size="sm" 
                              variant="primary" 
                              className="flex-1"
                              onClick={() => {
                                setSelectedTemplate(template);
                                setActiveTab('generator');
                              }}
                            >
                              <Download className="w-4 h-4 mr-2" />
                              Generate
                            </Button>
                          </div>
                        </div>
                      </div>
                    </Card>
                  ))}
              </div>
            )}

            {viewMode === 'table' && (
              <div className="bg-[#23233a] rounded-lg overflow-hidden">
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-[#1a1a2e]">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-[#b0b0d0] uppercase tracking-wider">Template</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-[#b0b0d0] uppercase tracking-wider">Type</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-[#b0b0d0] uppercase tracking-wider">Style</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-[#b0b0d0] uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-[#334155]">
                      {getFilteredTemplates()
                        .filter(template => template.type === selectedDocumentType)
                        .map((template) => (
                          <tr key={template.id} className="hover:bg-[#1a1a2e]/50">
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="text-sm font-medium text-white">{template.name}</div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="text-sm text-[#b0b0d0]">{template.type.replace('_', ' ')}</div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <Badge variant={getStyleColor(template.style) as any} size="sm">
                                {template.style}
                              </Badge>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              <div className="flex items-center space-x-2">
                                <Button size="sm" variant="secondary" onClick={() => {
                                  setSelectedTemplate(template);
                                  setActiveTab('preview');
                                }}>
                                  <Eye className="w-3 h-3" />
                                </Button>
                                <Button size="sm" variant="primary" onClick={() => {
                                  setSelectedTemplate(template);
                                  setActiveTab('generator');
                                }}>
                                  <Download className="w-3 h-3" />
                                </Button>
                              </div>
                            </td>
                          </tr>
                        ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}

            {viewMode === 'list' && (
              <div className="space-y-3">
                {getFilteredTemplates()
                  .filter(template => template.type === selectedDocumentType)
                  .map((template) => (
                    <Card key={template.id} className="hover:bg-[#23233a]/50 transition-colors">
                      <div className="flex items-center justify-between p-4">
                        <div className="flex items-center space-x-4">
                          <div className="flex-shrink-0">
                            <Palette className="w-8 h-8 text-[#a259ff]" />
                          </div>
                          <div>
                            <h3 className="text-white font-medium">{template.name}</h3>
                            <p className="text-[#b0b0d0] text-sm">{template.type.replace('_', ' ')} template</p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-4">
                          <Badge variant={getStyleColor(template.style) as any} size="sm">
                            {template.style}
                          </Badge>
                          <div className="flex items-center space-x-2">
                            <Button size="sm" variant="secondary" onClick={() => {
                              setSelectedTemplate(template);
                              setActiveTab('preview');
                            }}>
                              <Eye className="w-3 h-3" />
                            </Button>
                            <Button size="sm" variant="primary" onClick={() => {
                              setSelectedTemplate(template);
                              setActiveTab('generator');
                            }}>
                              <Download className="w-3 h-3" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    </Card>
                  ))}
              </div>
            )}

            {viewMode === 'grid' && (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {getFilteredTemplates()
                  .filter(template => template.type === selectedDocumentType)
                  .map((template) => (
                    <Card key={template.id} className="hover:bg-[#23233a]/50 transition-colors">
                      <div className="p-4">
                        <div className="text-center mb-3">
                          <Palette className="w-8 h-8 text-[#a259ff] mx-auto mb-2" />
                          <h3 className="text-white font-medium text-sm">{template.name}</h3>
                        </div>
                        <div className="text-center space-y-2">
                          <p className="text-[#b0b0d0] text-xs">{template.type.replace('_', ' ')}</p>
                          <Badge variant={getStyleColor(template.style) as any} size="sm">
                            {template.style}
                          </Badge>
                        </div>
                        <div className="flex items-center justify-center space-x-2 mt-3 pt-3 border-t border-[#334155]">
                          <Button size="sm" variant="secondary" onClick={() => {
                            setSelectedTemplate(template);
                            setActiveTab('preview');
                          }}>
                            <Eye className="w-3 h-3" />
                          </Button>
                          <Button size="sm" variant="primary" onClick={() => {
                            setSelectedTemplate(template);
                            setActiveTab('generator');
                          }}>
                            <Download className="w-3 h-3" />
                          </Button>
                        </div>
                      </div>
                    </Card>
                  ))}
              </div>
            )}

            {/* Uploaded Documents Section */}
            {uploadedDocuments.length > 0 && (
              <div className="space-y-4">
                <h3 className="text-xl font-semibold text-white">Uploaded Documents</h3>
                
                {viewMode === 'cards' && (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {getFilteredDocuments().map((doc) => (
                      <Card key={doc.id} className="hover:bg-[#23233a]/50 transition-colors">
                        <div className="p-4">
                          <div className="flex items-center justify-between mb-3">
                            <FileText className="w-8 h-8 text-[#a259ff]" />
                            <Badge variant={doc.type === 'template' ? 'primary' : 'secondary'} size="sm">
                              {doc.type}
                            </Badge>
                          </div>
                          <h4 className="text-white font-medium mb-2">{doc.name}</h4>
                          <p className="text-[#b0b0d0] text-sm mb-3">
                            {(doc.size / 1024).toFixed(1)} KB • {new Date(doc.uploaded_at).toLocaleDateString()}
                          </p>
                          <div className="flex items-center space-x-2">
                            <Button size="sm" variant="secondary" onClick={() => handlePreviewPDF(doc.file, doc.name)}>
                              <Eye className="w-3 h-3" />
                            </Button>
                            <Button size="sm" variant="primary" onClick={() => handleDownloadDocument(doc)}>
                              <Download className="w-3 h-3" />
                            </Button>
                            <Button size="sm" variant="danger" onClick={() => handleDeleteDocument(doc.id)}>
                              <Trash2 className="w-3 h-3" />
                            </Button>
                          </div>
                        </div>
                      </Card>
                    ))}
                  </div>
                )}

                {viewMode === 'table' && (
                  <div className="bg-[#23233a] rounded-lg overflow-hidden">
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead className="bg-[#1a1a2e]">
                          <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-[#b0b0d0] uppercase tracking-wider">Document</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-[#b0b0d0] uppercase tracking-wider">Type</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-[#b0b0d0] uppercase tracking-wider">Size</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-[#b0b0d0] uppercase tracking-wider">Uploaded</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-[#b0b0d0] uppercase tracking-wider">Actions</th>
                          </tr>
                        </thead>
                        <tbody className="divide-y divide-[#334155]">
                          {getFilteredDocuments().map((doc) => (
                            <tr key={doc.id} className="hover:bg-[#1a1a2e]/50">
                              <td className="px-6 py-4 whitespace-nowrap">
                                <div className="text-sm font-medium text-white">{doc.name}</div>
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap">
                                <Badge variant={doc.type === 'template' ? 'primary' : 'secondary'} size="sm">
                                  {doc.type}
                                </Badge>
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-[#b0b0d0]">
                                {(doc.size / 1024).toFixed(1)} KB
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-[#b0b0d0]">
                                {new Date(doc.uploaded_at).toLocaleDateString()}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm">
                                <div className="flex items-center space-x-2">
                                  <Button size="sm" variant="secondary" onClick={() => handlePreviewPDF(doc.file, doc.name)}>
                                    <Eye className="w-3 h-3" />
                                  </Button>
                                  <Button size="sm" variant="primary" onClick={() => handleDownloadDocument(doc)}>
                                    <Download className="w-3 h-3" />
                                  </Button>
                                  <Button size="sm" variant="danger" onClick={() => handleDeleteDocument(doc.id)}>
                                    <Trash2 className="w-3 h-3" />
                                  </Button>
                                </div>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {/* Preview Tab */}
        {activeTab === 'preview' && selectedTemplate && (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-2xl font-bold text-white">Template Preview</h2>
              <Button variant="secondary" onClick={() => setActiveTab('templates')}>
                Back to Templates
              </Button>
            </div>
            
            <Card>
              <div className="p-6">
                <div className="flex items-center space-x-4 mb-6">
                  <div className="p-3 bg-[#a259ff]/20 rounded-lg">
                    <FileText className="w-6 h-6 text-[#a259ff]" />
                  </div>
                  <div>
                    <h3 className="text-white font-medium text-lg">{selectedTemplate.name}</h3>
                    <p className="text-[#b0b0d0]">{selectedTemplate.type} • {selectedTemplate.style} style</p>
                  </div>
                </div>

                {/* Template Preview */}
                <div className="bg-white rounded-lg p-6 border border-[#23233a]/30">
                  <div className="text-center text-gray-600">
                    <Palette className="w-16 h-16 mx-auto mb-4 text-gray-400" />
                    <h4 className="text-lg font-medium mb-2">{selectedTemplate.name}</h4>
                    <p className="text-sm">This is a preview of the {selectedTemplate.style} template</p>
                    <p className="text-xs mt-2">Click "Generate" to create a document with this template</p>
                  </div>
                </div>

                <div className="flex items-center justify-end space-x-3 mt-6">
                  <Button variant="secondary" onClick={() => setActiveTab('templates')}>
                    Back
                  </Button>
                  <Button 
                    variant="primary" 
                    onClick={() => selectedTemplate && generateDocument(selectedTemplate.id)}
                    disabled={!selectedTemplate || isGenerating}
                  >
                    {isGenerating ? (
                        <>
                          <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                          Generating...
                        </>
                      ) : (
                        <>
                          <Play className="w-4 h-4 mr-2" />
                          Generate Document
                        </>
                      )}
                    </Button>
                  </div>
                </Card>
              )}

              {/* Generator Tab */}
              {activeTab === 'generator' && (
                <div className="space-y-6">
                  <div className="flex items-center justify-between">
                    <h2 className="text-2xl font-bold text-white">Document Generator</h2>
                    <Button variant="secondary" onClick={() => setActiveTab('templates')}>
                      Back to Templates
                    </Button>
                  </div>

                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {/* Document Form */}
                    <Card>
                      <div className="p-6">
                        <h3 className="text-white font-medium mb-4">Document Information</h3>
                        
                        <div className="space-y-4">
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <label className="block text-[#b0b0d0] text-sm mb-2">Document Number</label>
                              <input
                                type="text"
                                value={documentData.number}
                                onChange={(e) => setDocumentData({...documentData, number: e.target.value})}
                                className="w-full p-2 bg-[#16213e] border border-gray-600 rounded text-white"
                                placeholder="INV-2024-001"
                              />
                            </div>
                            <div>
                              <label className="block text-[#b0b0d0] text-sm mb-2">Issue Date</label>
                              <input
                                type="date"
                                value={documentData.issue_date}
                                onChange={(e) => setDocumentData({...documentData, issue_date: e.target.value})}
                                className="w-full p-2 bg-[#16213e] border border-gray-600 rounded text-white"
                              />
                            </div>
                          </div>

                          <div>
                            <label className="block text-[#b0b0d0] text-sm mb-2">Customer Name</label>
                            <input
                              type="text"
                              value={documentData.customer_name}
                              onChange={(e) => setDocumentData({...documentData, customer_name: e.target.value})}
                              className="w-full p-2 bg-[#16213e] border border-gray-600 rounded text-white"
                              placeholder="Customer Name"
                            />
                          </div>

                          <div>
                            <label className="block text-[#b0b0d0] text-sm mb-2">Customer Email</label>
                            <input
                              type="email"
                              value={documentData.customer_email}
                              onChange={(e) => setDocumentData({...documentData, customer_email: e.target.value})}
                              className="w-full p-2 bg-[#16213e] border border-gray-600 rounded text-white"
                              placeholder="customer@example.com"
                            />
                          </div>

                          <div>
                            <label className="block text-[#b0b0d0] text-sm mb-2">Customer Address</label>
                            <textarea
                              value={documentData.customer_address}
                              onChange={(e) => setDocumentData({...documentData, customer_address: e.target.value})}
                              className="w-full p-2 bg-[#16213e] border border-gray-600 rounded text-white"
                              rows={3}
                              placeholder="Customer Address"
                            />
                          </div>

                          <div>
                            <label className="block text-[#b0b0d0] text-sm mb-2">Items</label>
                            <div className="space-y-3">
                              {documentData.items.map((item, index) => (
                                <div key={index} className="grid grid-cols-4 gap-2">
                                  <input
                                    type="text"
                                    value={item.description}
                                    onChange={(e) => {
                                      const updatedItems = [...documentData.items];
                                      updatedItems[index].description = e.target.value;
                                      setDocumentData({...documentData, items: updatedItems});
                                    }}
                                    className="col-span-2 p-2 bg-[#16213e] border border-gray-600 rounded text-white"
                                    placeholder="Description"
                                  />
                                  <input
                                    type="number"
                                    value={item.quantity}
                                    onChange={(e) => {
                                      const updatedItems = [...documentData.items];
                                      updatedItems[index].quantity = parseInt(e.target.value) || 0;
                                      updateItemTotal(index);
                                    }}
                                    className="p-2 bg-[#16213e] border border-gray-600 rounded text-white"
                                    placeholder="Qty"
                                  />
                                  <input
                                    type="number"
                                    value={item.unit_price}
                                    onChange={(e) => {
                                      const updatedItems = [...documentData.items];
                                      updatedItems[index].unit_price = parseFloat(e.target.value) || 0;
                                      updateItemTotal(index);
                                    }}
                                    className="p-2 bg-[#16213e] border border-gray-600 rounded text-white"
                                    placeholder="Price"
                                  />
                                  <div className="flex items-center space-x-2">
                                    <span className="text-white text-sm">${item.total.toFixed(2)}</span>
                                    <Button
                                      size="sm"
                                      variant="danger"
                                      onClick={() => removeItem(index)}
                                      disabled={documentData.items.length === 1}
                                    >
                                      <Trash2 className="w-3 h-3" />
                                    </Button>
                                  </div>
                                </div>
                              ))}
                              <Button size="sm" variant="secondary" onClick={addItem}>
                                <Plus className="w-4 h-4 mr-2" />
                                Add Item
                              </Button>
                            </div>
                          </div>

                          <div>
                            <label className="block text-[#b0b0d0] text-sm mb-2">Notes</label>
                            <textarea
                              value={documentData.notes}
                              onChange={(e) => setDocumentData({...documentData, notes: e.target.value})}
                              className="w-full p-2 bg-[#16213e] border border-gray-600 rounded text-white"
                              rows={3}
                              placeholder="Additional notes..."
                            />
                          </div>
                        </div>

                        <div className="flex items-center justify-end space-x-3 mt-6">
                          <Button variant="secondary" onClick={() => setActiveTab('templates')}>
                            Cancel
                          </Button>
                          <Button 
                            variant="primary" 
                            onClick={() => selectedTemplate && generateDocument(selectedTemplate.id)}
                            disabled={!selectedTemplate || isGenerating}
                          >
                            {isGenerating ? (
                              <>
                                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                                Generating...
                              </>
                            ) : (
                              <>
                                <Play className="w-4 h-4 mr-2" />
                                Generate Document
                              </>
                            )}
                          </Button>
                        </div>
                      </div>
                    </Card>

                    {/* Generated Document Preview */}
                    {generatedDocument && (
                      <Card>
                        <div className="p-6">
                          <h3 className="text-white font-medium mb-4">Generated Document</h3>
                          
                          <div className="bg-white rounded-lg p-4 border border-[#23233a]/30 mb-4">
                            <div className="text-center text-gray-600">
                              <CheckCircle className="w-8 h-8 mx-auto mb-2 text-green-500" />
                              <p className="text-sm">Document generated successfully!</p>
                            </div>
                          </div>

                          <div className="flex items-center space-x-3">
                            <Button variant="secondary" onClick={previewDocument}>
                              <Eye className="w-4 h-4 mr-2" />
                              Preview
                            </Button>
                            <Button variant="primary" onClick={downloadDocument}>
                              <Download className="w-4 h-4 mr-2" />
                              Download
                            </Button>
                          </div>
                        </div>
                      </Card>
                    )}
                  </div>
                </div>
              )}

              {/* Settings Tab */}
              {activeTab === 'settings' && (
                <div className="space-y-6">
                  <h2 className="text-2xl font-bold text-white">Template Settings</h2>
                  <Card>
                    <div className="p-6">
                      <p className="text-[#b0b0d0]">Template management settings will be implemented here.</p>
                    </div>
                  </Card>
                </div>
              )}
            </Container>
          );
        };

        export default DocumentTemplateSelector; 